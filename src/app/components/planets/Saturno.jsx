/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: NestaEric (https://sketchfab.com/Nestaeric)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/saturn-c09a1970148c43ad99db134a9d6d00b5
title: Saturn
*/
import React, { useRef, Suspense, useState } from "react";
import {
  CameraControls,
  Center,
  Stars,
  useProgress,
  Html,
} from "@react-three/drei";
import { Canvas, useFrame } from "@react-three/fiber";
import { useGLTF } from "@react-three/drei";
import styled from "styled-components";

const RecentralizeButton = styled.div`
span {
  position: relative;
  top: 280px;
  left: 119px;
  border: 1px solid grey;
  padding: 5px;
  background-color: black;
  color: white;
  font-size: 20px;
  font-family: Arial, Helvetica, sans-serif;
  font-weight: bold;
  cursor: pointer;
}
`;

function Loader() {
  const { progress } = useProgress();
  return <Html center>{progress.toFixed(2)} % loaded</Html>;
}

const SaturnoModel = (props) => {
  const group = useRef();
  const { nodes, materials } = useGLTF("/saturn.glb");
  return (
    <group {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]} scale={1.76}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <group rotation={[-0.42, Math.PI / 2, 0]}>
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Object_4.geometry}
              material={materials.Saturn}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Object_5.geometry}
              material={materials.rings}
            />
          </group>
        </group>
      </group>
    </group>
  );
};

export const Saturno = () => {

  const cameraControlsRef = useRef();

  const handleRecentralize = () => {
    cameraControlsRef.current?.reset(true);
  };

  function RotatingObject() {
    const meshRef = useRef();
    const [rotation, setRotation] = useState(0);

    useFrame(() => {
      setRotation((prevRotation) => prevRotation + 0.0005);
      meshRef.current.rotation.y = rotation;
    });

    return (
      <mesh ref={meshRef}>
        <Stars
          radius={100}
          depth={50}
          count={5000}
          factor={4}
          saturation={0}
          fade={true}
        />
        <Html>
          <RecentralizeButton onClick={handleRecentralize}>
            <span>Recentralizar</span>
          </RecentralizeButton>
        </Html>
        <Center>
          <SaturnoModel />
        </Center>
      </mesh>
    );
  }

  return (
    <Canvas camera={{ position: [1.4, 1, 1.4], fov: 60 }} className={"canvas"}>
      <Suspense fallback={<Loader />}>
        <RotatingObject />
        <ambientLight intensity={0.15} />
        <CameraControls truck={false} ref={cameraControlsRef} />
      </Suspense>
    </Canvas>
  );
};

useGLTF.preload("/saturn.glb");
