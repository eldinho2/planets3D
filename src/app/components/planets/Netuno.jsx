/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: Akshat (https://sketchfab.com/shooter24994)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/neptune-947a405a0a4348f9a49ff4bd3ed3cc4b
title: Neptune
*/
import React, { useRef, Suspense, useState } from "react";
import {
  CameraControls,
  Center,
  Stars,
  useProgress,
  Html,
} from "@react-three/drei";
import { Canvas, useFrame } from "@react-three/fiber";
import { useGLTF } from "@react-three/drei";
import styled from "styled-components";

const RecentralizeButton = styled.div`
span {
  position: relative;
  top: 280px;
  left: 119px;
  border: 1px solid grey;
  padding: 5px;
  background-color: black;
  color: white;
  font-size: 20px;
  font-family: Arial, Helvetica, sans-serif;
  font-weight: bold;
  cursor: pointer;
}
`;

function Loader() {
  const { progress } = useProgress();
  return <Html center>{progress.toFixed(2)} % loaded</Html>;
}

const NetunoModel = (props) => {
  const group = useRef();
  const { nodes, materials } = useGLTF("/neptuneglb.glb");
  return (
    <group scale={0.1} ref={group} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <group name="NeptuneFBX" rotation={[Math.PI / 2, 0, 0]}>
            <group name="Object_2">
              <group name="RootNode">
                <group name="Neptune" rotation={[-1.83, 0, 0]} scale={3.9}>
                  <mesh
                    name="Neptune_01_-_Default_0"
                    castShadow
                    receiveShadow
                    geometry={nodes["Neptune_01_-_Default_0"].geometry}
                    material={materials["01_-_Default"]}
                  />
                </group>
                <group
                  name="Triton"
                  rotation={[-1.62, -0.26, 1.39]}
                  scale={0.25}
                >
                  <mesh
                    name="Triton_02_-_Default_0"
                    castShadow
                    receiveShadow
                    geometry={nodes["Triton_02_-_Default_0"].geometry}
                    material={materials["02_-_Default"]}
                  />
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  );
}

export const Netuno = () => {

  const cameraControlsRef = useRef();

  const handleRecentralize = () => {
    cameraControlsRef.current?.reset(true);
  };

  function RotatingObject() {
    const meshRef = useRef();
    const [rotation, setRotation] = useState(0);

    useFrame(() => {
      setRotation((prevRotation) => prevRotation + 0.0005);
      meshRef.current.rotation.y = rotation;
    });

    return (
      <mesh ref={meshRef}>
        <Stars
          radius={100}
          depth={50}
          count={5000}
          factor={4}
          saturation={0}
          fade={true}
        />
        <Html>
          <RecentralizeButton onClick={handleRecentralize}>
            <span>Recentralizar</span>
          </RecentralizeButton>
        </Html>
        <Center>
          <NetunoModel />
        </Center>
      </mesh>
    );
  }

  return (
    <Canvas camera={{ position: [100, 1, 100], fov: 60 }} className={"canvas"}>
    <Suspense fallback={<Loader />}>
      <CameraControls ref={cameraControlsRef} />
      <ambientLight intensity={3.2} />
      <RotatingObject />
    </Suspense>
  </Canvas>
  )
}

useGLTF.preload("/neptuneglb.glb");