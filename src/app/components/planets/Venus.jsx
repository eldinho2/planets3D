/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: uperesito (https://sketchfab.com/uperesito)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/venus-v11-99be254b68da48d092c3b8917020c67a
title: Venus v1.1
*/

import React, { useRef, Suspense, useState } from "react";
import {
  CameraControls,
  Center,
  Stars,
  useProgress,
  Html,
} from "@react-three/drei";
import { Canvas, useFrame } from "@react-three/fiber";
import { useGLTF } from "@react-three/drei";
import { Button } from "@/app/components/Button";

function Loader() {
  const { progress } = useProgress();
  return <Html center>{progress.toFixed(2)} % loaded</Html>;
}

const VenusModel = (props) => {
  const { nodes, materials } = useGLTF("/venus.glb");
  return (
    <group {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_2.geometry}
          material={materials.material}
        />
      </group>
    </group>
  );
}

export const Venus = () => {
  const [isfull, setFull] = useState(false);
  const container = useRef();

  const cameraControlsRef = useRef();

  const handleRecentralize = () => {
    cameraControlsRef.current?.reset(true);
  };

  const handleFullScreen = () => {
    if (!isfull) {
      container.current.requestFullscreen();
      container.current.requestPointerLock();
      setFull(true);
    } else {
      document.exitFullscreen();
      setFull(false);
    }
  }

  function RotatingObject() {
    const meshRef = useRef();
    const [rotation, setRotation] = useState(0);

    useFrame(() => {
      setRotation((prevRotation) => prevRotation + 0.0005);
      meshRef.current.rotation.y = rotation;
    });

    return (
      <mesh ref={meshRef}>
        <Stars
          radius={100}
          depth={50}
          count={5000}
          factor={4}
          saturation={0}
          fade={true}
        />
        <Html>
          <Button onClick={handleRecentralize}>
            <span>Recentralizar</span>
          </Button>
          <Button onClick={handleFullScreen}>
            <span>Tela inteira</span>
          </Button>
        </Html>
        <Center>
          <VenusModel />
        </Center>
      </mesh>
    );
  }

  return (
    <div className="container">
    <Canvas ref={container} camera={{ position: [2, 0, 2], fov: 60 }} >
    <Suspense fallback={<Loader />}>
      <CameraControls truck={false} minDistance={1.5} maxDistance={10} ref={cameraControlsRef} />
      <ambientLight intensity={0.5} />
      <RotatingObject />
    </Suspense>
  </Canvas>
  </div>
  )
}

useGLTF.preload("/venus.glb");