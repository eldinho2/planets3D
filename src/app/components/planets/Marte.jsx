/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: ARCTIC  WOLVESâ„¢ (https://sketchfab.com/arctic.wolves)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/mars-156a95dfec244e07a3ae423f579ffb05
title: Mars
*/

import React, { useRef, Suspense, useState } from "react";
import {
  CameraControls,
  Center,
  Stars,
  useProgress,
  Html,
} from "@react-three/drei";
import { Canvas, useFrame } from "@react-three/fiber";
import { useGLTF } from "@react-three/drei";

import Loader from "../Loader";


const MarteModel = (props) => {
  const { nodes, materials } = useGLTF("/marte.glb");
  return (
    <group {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <group rotation={[-Math.PI, 0, 0]}>
          <group rotation={[Math.PI / 2, 0, 0]}>
            <group position={[0, -2.5, 0]} rotation={[-Math.PI / 2, 0, 0]}>
              <mesh
                castShadow
                receiveShadow
                geometry={nodes.Mars_LOD0_MarsLOD1_0.geometry}
                material={materials.MarsLOD1}
              />
            </group>
          </group>
        </group>
      </group>
    </group>
  );
}

export const Marte = ({recentralized}) => {
  const { progress } = useProgress();

  const container = useRef();

  const cameraControlsRef = useRef();

  if (recentralized) {
    cameraControlsRef.current?.reset(true);
  }



  function RotatingObject() {
    const meshRef = useRef();
    const [rotation, setRotation] = useState(0);

    useFrame(() => {
      setRotation((prevRotation) => prevRotation + 0.0005);
      meshRef.current.rotation.y = rotation;
    });

    return (
      <mesh ref={meshRef}>
        <Stars
          radius={100}
          depth={50}
          count={5000}
          factor={4}
          saturation={0}
          fade={true}
        />
        <Center>
          <MarteModel />
        </Center>
      </mesh>
    );
  }

  return (
    <div className="h-screen w-screen">
    <Canvas ref={container} camera={{ position: [5, 2, 5], fov: 60 }} >
    <Suspense fallback={<Loader progress={progress} />}>
      <RotatingObject />
      <ambientLight intensity={0.5} />
      <CameraControls truck={false} minDistance={4} maxDistance={30} ref={cameraControlsRef} />
    </Suspense>
  </Canvas>
  </div>
  )
}

useGLTF.preload("/marte.glb");
